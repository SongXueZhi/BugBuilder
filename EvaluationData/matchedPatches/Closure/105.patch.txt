/Users/SE4Test/Downloads/checkout/Closure+105+_fix/src
diff --git a/Users/SE4Test/Downloads/checkout/closure_105_fix/src/com/google/javascript/jscomp/FoldConstants.java b/Users/SE4Test/Downloads/checkout/closure_105_buggy/src/com/google/javascript/jscomp/FoldConstants.java
index 657ee0a..f6d6a27 100644
--- a/Users/SE4Test/Downloads/checkout/closure_105_fix/src/com/google/javascript/jscomp/FoldConstants.java
+++ b/Users/SE4Test/Downloads/checkout/closure_105_buggy/src/com/google/javascript/jscomp/FoldConstants.java
@@ -1474,24 +1474,22 @@ class FoldConstants extends AbstractPostOrderCallback

    String joinString = NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = [-null;-]{+new StringBuilder();+}
    int foldedSize = 0;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem)) {
        if [-(sb == null) {-]
[-          sb = new StringBuilder();-]
[-        } else-]{+(sb.length() > 0)+} {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getStringValue(elem));
      } else {
        if [-(sb != null)-]{+(sb.length() > 0)+} {
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(Node.newString(sb.toString()));
          sb = [-null;-]{+new StringBuilder();+}
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
@@ -1499,7 +1497,7 @@ class FoldConstants extends AbstractPostOrderCallback
      elem = elem.getNext();
    }

    if [-(sb != null)-]{+(sb.length() > 0)+} {
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(Node.newString(sb.toString()));